# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FVpFeP58b6FcNy8ysMzVLge90ZU5DVl7
"""

from sklearn.datasets import make_circles


# Make 1000 samples
n_samples = 1000

# Create circles
X, y = make_circles(n_samples,
                    noise=0.03, # a little bit of noise to the dots
                    random_state=42) # keep random state so we get the same values

print(f"First 5 X features:\n{X[:5]}")
print(f"\nFirst 5 y labels:\n{y[:5]}")

import pandas as pd
circles = pd.DataFrame({"X1": X[:, 0],
    "X2": X[:, 1],
    "label": y
})
circles.head(10)

circles.shape

import matplotlib.pyplot as plt
plt.scatter(x=X[:, 0],
            y=X[:, 1],
            c=y,
            cmap=plt.cm.RdYlBu);

X_sample = X[0]
y_sample = y[0]
print(f"Values for one sample of X: {X_sample} and the same for y: {y_sample}")
print(f"Shapes for one sample of X: {X_sample.shape} and the same for y: {y_sample.shape}")

import torch
X = torch.from_numpy(X).type(torch.float)
y = torch.from_numpy(y).type(torch.float)

# View the first five samples
X[:5], y[:5]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,
                                                    y,
                                                    test_size=0.2, # 20% test, 80% train
                                                    random_state=42) # make the random split reproducible

len(X_train), len(X_test), len(y_train), len(y_test)

import torch
from torch import nn

# Make device agnostic code
device = "cuda" if torch.cuda.is_available() else "cpu"
device

class CircleModelV0(nn.Module):
    def __init__(self):
        super().__init__()
        # 2. Create 2 nn.Linear layers capable of handling X and y input and output shapes
        self.layer_1 = nn.Linear(in_features=2, out_features=5) #2 is x_train dim, 5 is no ways nn learns pattern
        self.layer_2 = nn.Linear(in_features=5, out_features=1) # 1 is  y dim

    # 3. Define a forward method containing the forward pass computation
    def forward(self, x):
        # Return the output of layer_2, a single feature, the same shape as y
        return self.layer_2(self.layer_1(x)) # computation goes through layer_1 first then the output of layer_1 goes through layer_2

# 4. Create an instance of the model and send it to target device
model_0 = CircleModelV0().to(device)
model_0

untrained_preds = model_0(X_test.to(device))
print(f"Length of predictions: {len(untrained_preds)}, Shape: {untrained_preds.shape}") #2 is x_train dim, 5 is no ways nn learns patte
print(f"Length of test samples: {len(y_test)}, Shape: {y_test.shape}")
print(f"\nFirst 10 predictions:\n{untrained_preds[:10]}")
print(f"\nFirst 10 test labels:\n{y_test[:10]}")

"""setting up loss function"""

loss_fn = nn.BCEWithLogitsLoss()#requires sigmoid activation
optimizer=torch.optim.SGD(params=model_0.parameters(),
                          lr=0.1)

def accuracy_fn(y_true,y_preds):
  correct=torch.eq(y_true,y_preds).item()
  acc=(correct/len(y_preds)) * 100
  return acc

"""(logits -> prediction probabilities -> prediction labels)"""

model_0.eval()
with torch.inference_mode():
  y_logits=model_0(X_test.to(device))[:5]
y_logits

y_preds=torch.sigmoid(y_logits)
y_preds

y_pred_probes = torch.round(y_preds)
y_pred_labels = torch.round(torch.sigmoid(model_0(X_test.to(device))[:5]))
print(torch.eq(y_pred_probes.squeeze(), y_pred_labels.squeeze()))
y_pred_probes.squeeze()

"""Train and testing model"""



epouch=100

X_train, y_train = X_train.to(device), y_train.to(device)
X_test, y_test = X_test.to(device), y_test.to(device)

for epuochs in range(epouch):
  model_0.train()
  y_logits=model_0(X_train).squeeze()
  y_pred = torch.round(torch.sigmoid(y_logits))
  loss=(y_logits,y_train)
  acc=accuracy_fn(y_true=y_train,
                  y_preds=y_pred)
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()


  model_0.eval()
  with torch.inference_mode():
     test_logits=model_0(X_test).squeeze()
     test_pred = torch.round(torch.sigmoid(y_logits))
     test_loss=(test_logits,y_test)
     test_acc=accuracy_fn(y_true = y_test,
                          y_pred = test_pred)
  if epouch % 10 == 0:
    print (f"Epoch: {epoch} | Loss: {loss:.5f}, Accuracy: {acc:.2f}% | test_Loss: {loss:.5f},test_Accuracy: {acc:.2f}% ")